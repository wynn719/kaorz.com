// Note Prisma doesnâ€™t support .env.local syntax, it must be named .env. For more information, check out their environment variables docs.
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?         @unique
  password      String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventRecords EventRecord[]

  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Event {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @updatedAt @map(name: "updated_at")
  EventRecord EventRecord[]

  @@map("events")
}

model EventRecord {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id])
  User    User   @relation(fields: [userId], references: [id])

  @@map("event_records")
}

model Like {
  id             Int      @id @default(autoincrement())
  postId         String?
  userClientUuid String // UUID generated on the client-side
  nickname       String? // For anonymous likes with a nickname
  targetId       String? // The ID of the target being liked
  targetType     String // Enum to specify the type of target being liked
  createdAt      DateTime @default(now())
}
